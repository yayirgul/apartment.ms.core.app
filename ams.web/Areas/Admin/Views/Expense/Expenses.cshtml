@{
    ViewData["Title"] = "Giderler";
}

@section Subheader {
    <div class="subheader py-2 py-lg-4 subheader-solid" id="kt_subheader">
        <div class="container-fluid d-flex align-items-center justify-content-between flex-wrap flex-sm-nowrap">
            <!--begin::Info-->
            <div class="d-flex align-items-center flex-wrap mr-2">
                <h5 class="text-dark font-weight-bold mt-2 mb-2 mr-5">Giderler</h5>
                <div class="subheader-separator subheader-separator-ver mt-2 mb-2 mr-4 bg-gray-200"></div>
                <span class="text-muted font-weight-bold mr-4">#XRS-45670</span>
            </div>
            <!--end::Info-->
            <!--begin::Toolbar-->
            <div class="d-flex align-items-center">
            </div>
            <!--end::Toolbar-->
        </div>
    </div>
}

<div class="container-fluid">
    <div class="row">
        <div class="col-xl-12">
            <div class="card card-custom">
                <div class="card-header">
                    <div class="card-title">
                        <span class="card-icon">
                            <i class="far fa-building text-primary"></i>
                        </span>
                        <h3 class="card-label">Giderler</h3>
                    </div>
                    <div class="card-toolbar">

                        <a href="javascript:;" id="modal-expense-new" class="btn btn-primary font-weight-bolder">
                            Yeni Gider
                        </a>
                    </div>
                </div>
                <div class="card-body">

                    <!--begin::Search Form-->
                    <div class="mb-7">
                        <div class="row align-items-center">
                            <div class="col-lg-12 col-xl-12">
                                <div class="row align-items-center">

                                    <div class="col-md-2 my-2 my-md-0">
                                        <div class="d-flex align-items-center">
                                            <select class="form-control" id="combo-filter-apartments">
                                                @* <option value="">Tümü</option> *@
                                            </select>
                                        </div>
                                    </div>

                                    <div class="col-md-1 my-2 my-md-0">
                                        <div class="d-flex align-items-center">
                                            <select class="form-control" id="combof-status">
                                                <option value="" selected="selected">Tümü</option>
                                                <option value="1">Aktif</option>
                                                <option value="2">Pasif</option>
                                            </select>
                                        </div>
                                    </div>

                                    <div class="col-md-1 my-2 my-md-0">
                                        <div class="d-flex align-items-center">
                                            <select class="form-control" id="combo-filter-months">
                                                <option value="1">Ocak</option>
                                                <option value="2">Şubat</option>
                                                <option value="3">Mart</option>
                                                <option value="4">Nisan</option>
                                                <option value="5">Mayıs</option>
                                                <option value="6">Haziran</option>
                                                <option value="7">Temmuz</option>
                                                <option value="8">Ağustos</option>
                                                <option value="9">Eylül</option>
                                                <option value="10">Ekim</option>
                                                <option value="11">Kasım</option>
                                                <option value="12">Aralık</option>
                                            </select>
                                        </div>
                                    </div>

                                    <div class="col-md-1 my-2 my-md-0">
                                        <div class="d-flex align-items-center">
                                            <select class="form-control" id="combo-filter-years">
                                                <option value="2025">2025</option>
                                                <option value="2024">2024</option>
                                            </select>
                                        </div>
                                    </div>


                                    <div class="col-md-7 my-2 my-md-0">
                                        <div class="row align-items-center justify-content-end">

                                            <div class="col-md-12 my-2 my-md-0 d-flex align-items-center justify-content-end">

                                                <div class="input-icon mr-5">
                                                    <input type="text" class="form-control" placeholder="Search..." id="kt_datatable_search_query" />
                                                    <span>
                                                        <i class="flaticon2-search-1 text-muted"></i>
                                                    </span>
                                                </div>


                                                <div class="d-flex align-items-center justify-content-end">
                                                    <a href="javascript:;" id="modal-debit-new" class="btn btn-danger font-weight-bolder">
                                                        Borçlandır
                                                    </a>
                                                </div>

                                            </div>

                                        </div>
                                    </div>

                                </div>
                            </div>

                        </div>
                    </div>

                    <div class="datatable datatable-bordered datatable-head-custom" id="t-expenses"></div>

                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-expense" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-md" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modal-expense-title">Yeni</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i aria-hidden="true" class="ki ki-close"></i>
                </button>
            </div>
            <div class="modal-body">

                <form class="form" id="fv-form-expense">

                    <div class="form-group mb-0 row">

                        <input type="hidden" name="ExpenseId" />

                        <div class="col-xl-12 mb-6">
                            <label>* Gider Adı</label>
                            <input type="text" name="ExpenseName" class="form-control money" placeholder="">
                        </div>

                        <div class="col-xl-12 mb-6">
                            <label>* Apartman</label>
                            <select class="form-control" name="ExpApartments" id="combo-expense-apartments"></select>
                        </div>

                        <div class="col-xl-6 mb-6">
                            <label>* Ay</label>
                            <select class="form-control" id="combo-expense-months">
                                <option value="1">Ocak</option>
                                <option value="2">Şubat</option>
                                <option value="3">Mart</option>
                                <option value="4">Nisan</option>
                                <option value="5">Mayıs</option>
                                <option value="6">Haziran</option>
                                <option value="7">Temmuz</option>
                                <option value="8">Ağustos</option>
                                <option value="9">Eylül</option>
                                <option value="10">Ekim</option>
                                <option value="11">Kasım</option>
                                <option value="12">Aralık</option>
                            </select>
                        </div>

                        <div class="col-xl-6 mb-6">
                            <label>* Yıl</label>
                            <select class="form-control" id="combo-expense-years">
                                <option value="2025">2025</option>
                                <option value="2024">2024</option>
                            </select>
                        </div>

                        <div class="col-xl-12 mb-6">
                            <label>* Tutar</label>
                            <input type="text" name="Amount" class="form-control money" id="kt_money_input" maxlength="22" placeholder="0,00">
                        </div>

                        <div class="col-xl-12">
                            <label>Periyot (<b>12 Aylık</b>)</label>
                            <span class="switch switch-outline switch-icon switch-primary switch-md expense-fixed-on-off" data-analytics-id="">
                                <label>
                                    <input type="checkbox" name="select">
                                    <span></span>
                                </label>
                            </span>

                        </div>

                    </div>

                </form>

            </div>
            <div class="modal-footer">
                <button type="button" id="fv-expense-save" class="btn btn-primary font-weight-bold">Kaydet</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="modal-debit" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-md" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modal-user-title">Borçlandır</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i aria-hidden="true" class="ki ki-close"></i>
                </button>
            </div>
            <div class="modal-body">

                <form class="form" id="form-user">

                    <div class="form-group mb-0 row">


                        <div class="col-xl-12">

                            <label class="option mb-0">

                                <span class="option-label">
                                    @*       <span class="option-head">
                                    <span class="option-title">Apartman</span>
                                    </span> *@
                                    <span class="option-body pt-0">

                                        <div class="row">

                                            <div class="col-xl-12">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <h6 class="font-size-sm text-dark mb-0">APARTMAN - AY / YIL</h6>
                                                    <span class="btn btn-sm btn-text btn-light-primary font-weight-bold" id="label-apartment-month-year">Huzur APT - 7.2024</span>
                                                </div>
                                            </div>

                                            @*       <div class="col-xl-12">
                                            <div class="d-flex justify-content-between align-items-center">
                                            <h6 class="font-size-sm text-dark mb-0">AY / YIL</h6>
                                            <span class="btn btn-sm btn-text btn-light-success font-weight-bold">07.2024</span>
                                            </div>
                                            </div> *@

                                            <div class="col-xl-12">
                                                <div class="separator separator-solid my-7"></div>
                                            </div>

                                            <div class="col-xl-12 mb-4">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <h6 class="font-size-sm text-dark mb-0">TOPLAM TUTAR</h6>
                                                    <span class="btn btn-sm btn-text btn-light-danger font-weight-bold" id="label-apartment-total-amount">0 ₺</span>
                                                </div>
                                            </div>

                                            <div class="col-xl-12">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <h6 class="font-size-sm text-dark mb-0">HESAPLANAN KONUT TUTARI</h6>
                                                    <span class="btn btn-sm btn-text btn-light-danger font-weight-bold" id="label-apartment-calc-amount">0 ₺</span>
                                                </div>
                                            </div>

                                        </div>

                                    </span>
                                </span>
                            </label>
                        </div>





                    </div>

                </form>

            </div>
            <div class="modal-footer">
                @*<button type="button" class="btn btn-light-primary font-weight-bold" data-dismiss="modal">Close</button>*@
                <button type="button" id="button-auto-debit" class="btn btn-primary font-weight-bold">Borçlandır</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    <script src="~/lib/theme/plugins/custom/datatables/datatables.bundle.js"></script>

    <script type="text/javascript">

        var app = app || {}
        app.Urls = app.Urls || {}
        app.Urls.ApartmentList = "@(Url.Action("Apt", "Apartment"))";


        var _date = new Date();

        // qcs.default[0].month;

        // Query Component Selector
        const qcs = {
            default: [
                {
                    month: _date.getMonth() + 1,
                    year: _date.getFullYear(),
                }
            ],
            table: "#t-expenses",
            input: {
                expense_id: "[name='ExpenseId']",
                expense_name: "[name='ExpenseName']",
                expense_amount: "[name='Amount']"
            },
            label: {
                apartment_month_year: '#label-apartment-month-year',
                apartment_total_amount: '#label-apartment-total-amount',
                apartment_calc_amount: '#label-apartment-calc-amount'
            },
            combo: {
                expense_months: '#combo-expense-months',
                expense_years: '#combo-expense-years',
                expense_apartments: '#combo-expense-apartments',
                debit_months: '#combo-debit-months',
                debit_years: '#combo-debit-years',
                debit_apartments: '#combo-debit-apartments',
                filter: {
                    apartments: '#combo-filter-apartments',
                    months: '#combo-filter-months',
                    years: '#combo-filter-years'
                }
            },
            modal: {
                expense: '#modal-expense',
                debit: '#modal-debit',
                expense_new: '#modal-expense-new',
                expense_edit: '.modal-expense-edit',
                debit_new: '#modal-debit-new',
                expense_title: '#modal-expense-title'
            },
            button: {
                auto_debit: "#button-auto-debit",
            },
            switch: {
                expense_fixed_on_off: ".expense-fixed-on-off",
            }
        }

        var Masks = function () {
            var Mask = function () {
                $('#kt_money_input').mask("#.##0,00", {
                    reverse: true
                });
            }
            return {
                Init: function () {
                    Mask();
                }
            };
        }();


        function combo_apartments() {

            $.ajax({
                type: 'GET',
                url: "/ams/app/combo-apartments",
                async: false,
                dataType: 'json',
                success: function (data) {

                    $.each(data, function (i, v) {

                        if (i == 0) {
                            $(qcs.combo.filter.apartments).append('<option value=' + v.id + ' selected="selected">' + v.apartmentName + '</option>');
                            $(qcs.combo.expense_apartments).append('<option value=' + v.id + ' selected="selected">' + v.apartmentName + '</option>');
                        } else {
                            $(qcs.combo.expense_apartments).append('<option value=' + v.id + '>' + v.apartmentName + '</option>');
                            $(qcs.combo.filter.apartments).append('<option value=' + v.id + '>' + v.apartmentName + '</option>');
                        }

                        // $(qcs.combo.expense_apartments).append($("<option selected='selected'></option>").val(v.id).html(v.apartmentName));

                    });

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log('Could not get posts, server response: ' + textStatus + ': ' + errorThrown);
                }
            });

        }

        function expenses() {

            const fv_form_expense = document.getElementById('fv-form-expense');
            const fv_expense_save = document.getElementById('fv-expense-save');

            const fv = FormValidation.formValidation(fv_form_expense, {

                fields: {

                    ExpenseName: {
                        validators: {
                            notEmpty: {
                                message: 'Gider alanı boş geçilemez.'
                            },
                            stringLength: {
                                min: 5,
                                max: 50,
                                message: 'Gider adı minimum 5, maksimum 100 karakter olmalıdır.'
                            }
                        }
                    },

                    Amount: {
                        validators: {
                            notEmpty: {
                                message: 'Tutar alanı boş geçilemez.'
                            },
                            stringLength: {
                                min: 1,
                                message: 'Tutar minimum 1 olmalıdır'
                            }
                        }
                    },

                },
                plugins: {
                    trigger: new FormValidation.plugins.Trigger(),
                    bootstrap: new FormValidation.plugins.Bootstrap(),
                },
            }).on('core.form.validating', function () {
                fv_expense_save.innerHTML = 'Doğrulanıyor ...';
            });

            fv_expense_save.addEventListener('click', function () {

                fv.validate().then(function (status) {

                    fv_expense_save.innerHTML = status === 'Valid' ? 'Güncelleniyor...' : 'Lütfen tekrar deneyin';

                    switch (status) {
                        case "Valid":

                            var apartment_id = $("select[name='ExpApartments']").val();
                            var is_fixed = $(qcs.switch.expense_fixed_on_off).find('input[type="checkbox"]').is(':checked');

                            var dm = {
                                Id: $(qcs.input.expense_id).val(),
                                ExpenseName: $(qcs.input.expense_name).val(),
                                ApartmentId: apartment_id,
                                Month: $(qcs.combo.expense_months).val(),
                                Year: $(qcs.combo.expense_years).val(),
                                Amount: $(qcs.input.expense_amount).val(),
                                IsFixed: is_fixed
                            };

                            console.log(dm);

                            $.post("/ams/app/expense-edit", dm, function (d) {

                                console.log(d);

                                if (d.isSucceed) {
                                    switch (d.statuses) {
                                        case 'x-add':

                                            Swal.fire({
                                                title: "Tebrikler",
                                                text: "Yeni gider oluşturuluyor...",
                                                icon: "success",
                                                timer: 4000,
                                                onOpen: function () {
                                                    Swal.showLoading()
                                                },
                                                allowOutsideClick: false,
                                                allowEscapeKey: false,
                                                buttonsStyling: false,
                                                confirmButtonText: "<i class='la la-headphones'></i> I am game!",
                                                showCancelButton: false,
                                                cancelButtonText: "<i class='la la-thumbs-down'></i> No, thanks",
                                                customClass: {
                                                    confirmButton: "btn btn-danger",
                                                    cancelButton: "btn btn-default"
                                                }
                                            }).then(function (r) {

                                                if (r.dismiss === "timer") {
                                                    $(qcs.modal.expense).modal('hide');
                                                    l_expenses(dm.ApartmentId, dm.Month, dm.Year);
                                                }

                                            });

                                            break;
                                        case 'x-edit':

                                            Swal.fire({
                                                title: "Güncelleniyor",
                                                text: "Gider bilgileri güncelleniyor.",
                                                icon: "success",
                                                timer: 4000,
                                                onOpen: function () {
                                                    Swal.showLoading()
                                                },
                                                allowOutsideClick: false,
                                                allowEscapeKey: false,
                                                buttonsStyling: false,
                                                confirmButtonText: "<i class='la la-headphones'></i> I am game!",
                                                showCancelButton: false,
                                                cancelButtonText: "<i class='la la-thumbs-down'></i> No, thanks",
                                                customClass: {
                                                    confirmButton: "btn btn-danger",
                                                    cancelButton: "btn btn-default"
                                                }
                                            }).then(function (r) {

                                                if (r.dismiss === "timer") {

                                                    $(qcs.modal.expense).modal('hide');
                                                    l_expenses(dm.ApartmentId, dm.Month, dm.Year);
                                                }

                                            });

                                            break;
                                        case 'x-fail':

                                            Swal.fire({
                                                title: "Hata",
                                                text: "İstenmeyen bir hata oluştu.",
                                                icon: "error",
                                                timer: 4000,
                                                onOpen: function () {
                                                    Swal.showLoading()
                                                },
                                                allowOutsideClick: false,
                                                allowEscapeKey: false,
                                                buttonsStyling: false,
                                                confirmButtonText: "<i class='la la-headphones'></i> I am game!",
                                                showCancelButton: false,
                                                cancelButtonText: "<i class='la la-thumbs-down'></i> No, thanks",
                                                customClass: {
                                                    confirmButton: "btn btn-danger",
                                                    cancelButton: "btn btn-default"
                                                }
                                            }).then(function (r) {

                                                if (r.dismiss === "timer") {
                                                    $(qcs.modal.expense).modal('hide');
                                                    l_expenses(dm.ApartmentId, dm.Month, dm.Year);
                                                }
                                            });

                                            break;
                                    }
                                }

                            }).done(function () {

                            }).fail(function (jqXHR, textStatus, errorThrown) {

                            }).always(function () {

                            });

                            break;
                        default:
                    }

                });
            });

            $(document).on("change", qcs.combo.filter.apartments, function () {

                var filter = {
                    apartment_id: $(this).val(),
                    month: $(qcs.combo.filter.months).val(),
                    year: $(qcs.combo.filter.years).val(),
                }

                sessionStorage.setItem("_apartment", filter.apartment_id);
                sessionStorage.setItem("_month", filter.month);
                sessionStorage.setItem("_year", filter.year);

                $(qcs.combo.filter.apartments).children('option').removeAttr('selected');
                $(qcs.combo.filter.apartments).find('option[value=' + filter.apartment_id + ']').attr('selected', 'selected');

                l_expenses(filter.apartment_id, filter.month, filter.year);

            });

            $(document).on("change", qcs.combo.filter.months, function () {

                var filter = {
                    apartment_id: $(qcs.combo.filter.apartments).val(),
                    month: $(this).val(),
                    year: $(qcs.combo.filter.years).val(),
                }

                sessionStorage.setItem("_apartment", filter.apartment_id);
                sessionStorage.setItem("_month", filter.month);
                sessionStorage.setItem("_year", filter.year);

                $(qcs.combo.filter.months).children('option').removeAttr('selected');
                $(qcs.combo.filter.months).find('option[value=' + filter.month + ']').attr('selected', 'selected');

                $(qcs.combo.expense_months).find('option[value=' + filter.month + ']').attr('selected', 'selected');
                $(qcs.combo.expense_years).find('option[value=' + filter.year + ']').attr('selected', 'selected');

                l_expenses(filter.apartment_id, filter.month, filter.year);

            });

            $(document).on("change", qcs.combo.filter.years, function () {

                var filter = {
                    apartment_id: $(qcs.combo.filter.apartments).val(),
                    month: $(qcs.combo.filter.months).val(),
                    year: $(this).val(),
                }

                sessionStorage.setItem("_apartment", filter.apartment_id);
                sessionStorage.setItem("_month", filter.month);
                sessionStorage.setItem("_year", filter.year);

                $(qcs.combo.filter.years).children('option').removeAttr('selected');
                $(qcs.combo.filter.years).find('option[value=' + filter.year + ']').attr('selected', 'selected');

                $(qcs.combo.expense_months).find('option[value=' + filter.month + ']').attr('selected', 'selected');
                $(qcs.combo.expense_years).find('option[value=' + filter.year + ']').attr('selected', 'selected');

                l_expenses(filter.apartment_id, filter.month, filter.year);

            });

            // TODO : Gider girebileceğimiz "Modal" açma
            $(document).delegate(qcs.modal.expense_new, 'click', function () {

                $(qcs.modal.expense_title).text('Yeni');
                $(qcs.switch.expense_fixed_on_off).find('input[type="checkbox"]').prop('checked', false);

                fv.resetForm("fv-form-expense");
                fv_expense_save.innerHTML = "Kaydet";

                $(qcs.modal.expense).modal();

            });

            // TODO : Gider düzenleyeceğimiz "Modal" açma
            $(document).delegate(qcs.modal.expense_edit, 'click', function () {

                $(qcs.modal.expense_title).text('Düzenle');
                fv_expense_save.innerHTML = "Kaydet";
                var filter = { id: $(this).data('expense-id') }

                g_expense(filter.id);

                $(qcs.modal.expense).modal();

            });

            // TODO : Apartmana bağlı konutları borçlandırma "Modal" açma
            $(document).delegate(qcs.modal.debit_new, 'click', function () {

                var apartment = {
                    id: $(qcs.combo.filter.apartments).val(),
                    title: $(qcs.combo.filter.apartments + " option:selected").text(),
                    month: $(qcs.combo.filter.months).val(),
                    year: $(qcs.combo.filter.years).val(),
                };

                g_debit_calc(apartment.id, apartment.title, apartment.month, apartment.year);
                
            });


            // TODO : Apartmana bağlı konutları borçlandır
            $(document).delegate(qcs.button.auto_debit, 'click', function () {

                var dm = {
                    ApartmentId: $(qcs.combo.filter.apartments).val(),
                    Month: $(qcs.combo.filter.months).val(),
                    Year: $(qcs.combo.filter.years).val(),
                };

                console.log(dm);

                $.post("/ams/app/auto/debit/add", dm, function (d) {

                    console.log(d);

                    if (d.isSucceed) {
                        switch (d.statuses) {
                            case 'x-debit':

                                Swal.fire({
                                    title: "Tebrikler",
                                    text: "Konutlar borçlandırıldı.",
                                    icon: "success",
                                    timer: 4000,
                                    onOpen: function () {
                                        Swal.showLoading()
                                    },
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    buttonsStyling: false,
                                    confirmButtonText: "<i class='la la-headphones'></i> I am game!",
                                    showCancelButton: false,
                                    cancelButtonText: "<i class='la la-thumbs-down'></i> No, thanks",
                                    customClass: {
                                        confirmButton: "btn btn-danger",
                                        cancelButton: "btn btn-default"
                                    }
                                }).then(function (r) {

                                    if (r.dismiss === "timer") {
                                        $(qcs.modal.debit).modal('hide');
                                        l_expenses(dm.ApartmentId, dm.Month, dm.Year);
                                    }

                                });

                                break;
                            case 'x-duplicate':

                                Swal.fire({
                                    title: "Uyarı",
                                    html: "<b>" + dm.Month + "/" + dm.Year + "</b> tarihine ait borçlandırılma yapılmıştır. Tekrardan borçlandırma yapamazsınız...",
                                    icon: "warning",
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    buttonsStyling: false,
                                    confirmButtonText: "Tamam",
                                    customClass: {
                                        confirmButton: "btn btn-danger",
                                        cancelButton: "btn btn-default"
                                    }
                                }).then(function (result) {

                                    if (result.value) {
                                        $(qcs.modal.debit).modal('hide');
                                    }

                                });

                                break;
                            case 'n-found-housing':

                                Swal.fire({
                                    title: "Uyarı",
                                    html: "<b>Apartmana</b> bağlı <b>konutlar</b> bulunamadı...",
                                    icon: "warning",
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    buttonsStyling: false,
                                    confirmButtonText: "Tamam",
                                    customClass: {
                                        confirmButton: "btn btn-danger",
                                        cancelButton: "btn btn-default"
                                    }
                                }).then(function (result) {

                                    if (result.value) {
                                        window.location.href = "/ams/housings";
                                    }

                                });

                                break;
                        }
                    }

                }).done(function () {

                }).fail(function (jqXHR, textStatus, errorThrown) {

                }).always(function () {

                });

            });


            $(document).on('change', qcs.switch.expense_fixed_on_off, function () {

                var is_checkbox = $(this, qcs.switch.expense_fixed_on_off).find('input[type="checkbox"]').is(':checked');

                $(this, qcs.switch.expense_fixed_on_off).find('input[type="checkbox"]').removeAttr("checked");

                if (is_checkbox) {
                    console.log(is_checkbox);
                    $(this, qcs.switch.expense_fixed_on_off).find('input[type="checkbox"]').attr("checked", "checked");
                }
                else {
                    $(this, qcs.switch.expense_fixed_on_off).find('input[type="checkbox"]').removeAttr("checked");
                }

            });



        }

        function g_debit_calc(id, title, month, year) {

            // var dm = { Id: expense_id };

            $.get("/ams/app/expense-debit-calc/" + id + "/" + month + "/" + year, function (d) {

                console.log("CALC :::::::");
                console.log(d);

                if (d.isSucceed) {
                    switch (d.statuses) {
                        case 'x-calc':

                            $(qcs.modal.debit).modal();

                            $(qcs.label.apartment_month_year).text(title + " - " + month + "." + year);
                            $(qcs.label.apartment_total_amount).text(d.view.totalAmount);
                            $(qcs.label.apartment_calc_amount).text(d.view.calcAmount);

                            break;
                        case 'x-fail':

                            Swal.fire({
                                title: "Hata",
                                text: "Hesaplama yapılacak tutar bulunamadı...",
                                icon: "error",
                                allowOutsideClick: false,
                                allowEscapeKey: false,
                                buttonsStyling: false,
                                confirmButtonText: "Tamam",
                                showCancelButton: false,
                                cancelButtonText: "<i class='la la-thumbs-down'></i> No, thanks",
                                customClass: {
                                    confirmButton: "btn btn-danger",
                                    cancelButton: "btn btn-default"
                                }
                            }).then(function (r) {
                                if (r.value) {
                                    $(qcs.modal.housing).modal('hide');
                                }
                            });

                            break;
                    }
                }

            }).done(function (d) {

            }).fail(function (jqXHR, textStatus, errorThrown) {

                Swal.fire({
                    title: "Hata",
                    text: "Hata Kodu : " + textStatus,
                    icon: "error",
                    timer: 4000,
                    onOpen: function () {
                        Swal.showLoading()
                    },
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    buttonsStyling: false,
                    confirmButtonText: "<i class='la la-headphones'></i> I am game!",
                    showCancelButton: false,
                    cancelButtonText: "<i class='la la-thumbs-down'></i> No, thanks",
                    customClass: {
                        confirmButton: "btn btn-danger",
                        cancelButton: "btn btn-default"
                    }
                }).then(function (r) {

                    if (r.dismiss === "timer") { }

                });

            }).always(function (d) {

            });

        }

        function g_expense(expense_id) {

            // var dm = { Id: expense_id };

            $.get("/ams/app/expense/" + expense_id, function (d) {

                console.log("EXPENSE DETAIL :::::::");
                console.log(d);

                $(qcs.input.expense_id).val(d.id);
                $(qcs.input.expense_name).val(d.expenseName);
                $(qcs.input.expense_amount).val(d._Amount);

                $(qcs.combo.expense_apartments + " option[value=" + d.apartmentId + "]").removeAttr('selected').attr('selected', 'selected');
                $(qcs.combo.expense_months + " option[value=" + d.month + "]").removeAttr('selected').attr('selected', 'selected');
                $(qcs.combo.expense_years + " option[value=" + d.year + "]").removeAttr('selected').attr('selected', 'selected');

                $(qcs.switch.expense_fixed_on_off).find('input[type="checkbox"]').prop('checked', d.isFixed);

            }).done(function (d) {

            }).fail(function (jqXHR, textStatus, errorThrown) {

                Swal.fire({
                    title: "Hata",
                    text: "Hata Kodu : " + textStatus,
                    icon: "error",
                    timer: 4000,
                    onOpen: function () {
                        Swal.showLoading()
                    },
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    buttonsStyling: false,
                    confirmButtonText: "<i class='la la-headphones'></i> I am game!",
                    showCancelButton: false,
                    cancelButtonText: "<i class='la la-thumbs-down'></i> No, thanks",
                    customClass: {
                        confirmButton: "btn btn-danger",
                        cancelButton: "btn btn-default"
                    }
                }).then(function (r) {

                    if (r.dismiss === "timer") { }

                });

            }).always(function (d) {

            });

        }


        function l_expenses(apartment_id, month, year) {

            $(qcs.table).KTDatatable('destroy');

            var ds = $.ajax({
                type: 'GET',
                url: '/ams/app/expenses/' + apartment_id + '/' + month + '/' + year,
                async: false,
                dataType: 'json',
                done: function (data) {
                    return data;
                },
                fail: function (jqXHR, textStatus, errorThrown) {
                    console.log('Could not get posts, server response: ' + textStatus + ': ' + errorThrown);
                }
            }).responseJSON;

            // console.table(ds);
            console.log(ds);


            var datatable = $(qcs.table).KTDatatable({
                // datasource definition
                data: {
                    // type: 'local',
                    // source: dataJSONArray,
                    source: ds,
                    pageSize: 10,
                },

                // layout definition
                layout: {
                    scroll: false, // enable/disable datatable scroll both horizontal and vertical when needed.
                    // height: 450, // datatable's body's fixed height
                    footer: false, // display/hide footer
                },
                // column sorting
                sortable: true,
                pagination: true,
                search: {
                    input: $('#kt_datatable_search_query'),
                    key: 'generalSearch',
                },

                // columns definition
                columns: [
                    {
                        field: 'apartmentId',
                        title: '#',
                        sortable: false,
                        width: 20,
                        type: 'number',
                        selector: true,
                        textAlign: 'center',
                    },
                    {
                        field: 'expenseName',
                        title: 'Gider',
                        template: function (row) {
                    
                            var status = {
                                1: { 'class': ' label-success' },
                                2: { 'class': ' label-danger' },
                            };

                            return `
                                    <div class='d-flex align-items-center'>
                                     <b class='mr-3'>${row.expenseName}</b>
                                     <span class="label label-xl label-dot ${status[row.isActive].class}"></span>
                                    </div>
                                    `;
                        },
                    },
                    // {
                    //     field: '_CreateTime',
                    //     title: 'Oluşturulma Tarihi',
                    //     type: 'date',
                    //     // format: 'MM/DD/YYYY',
                    // },
                    // {
                    //     field: 'createUser',
                    //     title: 'Oluşturan',
                    // },
                    {
                        field: 'Month',
                        title: 'Ay/Yıl',
                        template: function (row) {
                            return row.month + '/' + row.year;
                        },
                    },
                    {
                        field: 'isFixed',
                        title: 'Periyot',
                        template: function (row) {

                            if (row.isFixed) {
                                return "<b>12 Aylık</b>";
                            } else {
                                return "-";
                            }
                        },
                    },
                    {
                        field: 'Amount',
                        title: 'Tutar',
                        template: function (row) {
                            return "<b>" + row._Amount + "</b>";
                        },
                    },
                    // {
                    //     field: 'Type',
                    //     title: 'Type',
                    //     autoHide: false,
                    //     template: function (row) {
                    //         var status = {
                    //             1: {
                    //                 'title': 'Online',
                    //                 'state': 'danger',
                    //             },
                    //             2: {
                    //                 'title': 'Retail',
                    //                 'state': 'primary',
                    //             },
                    //             3: {
                    //                 'title': 'Direct',
                    //                 'state': 'success',
                    //             },
                    //         };
                    //         return '<span class="label label-' + status[row.Type].state + ' label-dot mr-2"></span><span class="font-weight-bold text-' + status[row.Type].state + '">' +
                    //             status[row.Type].title + '</span>';
                    //     },
                    // },
                    {
                        field: 'Actions',
                        title: 'İşlem',
                        sortable: false,
                        width: 125,
                        overflow: 'visible',
                        autoHide: false,
                        template: function (row) {


                            return '\
<a href="javascript:;" class="btn btn-sm btn-clean btn-icon  modal-expense-edit" data-expense-id=' + row.id + ' data-toggle="tooltip" data-theme="dark" title="Edit" >\
        <i class="flaticon-edit"></i>\
</a>\
\<a href="javascript:;" class="btn btn-sm btn-clean btn-icon" data-delete-id='+ row.id + ' data-toggle="tooltip" data-theme="dark" title="Delete">\
        <i class="flaticon-delete"></i>\
</a>\
';

                        },
                    }],
            });

            $('#combof-status').on('change', function (e) {

                // console.log(e.target.value);
                // console.log($(this).val().toLowerCase());

                var status = $(this).val().toLowerCase();
                datatable.search(status, 'isActive');

            });

            $('#combof-months').on('change', function (e) {



            });






            // $('#kt_datatable_search_type').on('change', function () {
            //     datatable.search($(this).val().toLowerCase(), 'Type');
            // });

            // $('#kt_datatable_search_status, #kt_datatable_search_type').selectpicker();


            $('#kt_subheader').on('click', function (e) {

                e.preventDefault();

                $('.datatable-input').each(function () {
                    $(this).val('');
                    datatable.column($(this).data('col-index')).search('', false, false);
                });
                datatable.table().draw();
            });


        }


        $(function () {

            combo_apartments();
            expenses();

            // $(qcs.combo.filter.months).find('option[value=' + qcs.default[0].month + ']').attr('selected', 'selected');
            // $(qcs.combo.expense_months).find('option[value=' + qcs.default[0].month + ']').attr('selected', 'selected');

            // $(qcs.combo.filter.years).find('option[value=' + qcs.default[0].year + ']').attr('selected', 'selected');
            // $(qcs.combo.expense_years).find('option[value=' + qcs.default[0].year + ']').attr('selected', 'selected');

            var filter = {
                apartment_id: $(qcs.combo.filter.apartments).val(),
                month: $(qcs.combo.filter.months).val(),
                year: $(qcs.combo.filter.years).val(),
            }

            var sessions = {
                apartment: sessionStorage.getItem("_apartment"),
                month: sessionStorage.getItem("_month"),
                year: sessionStorage.getItem("_year")
            }

            if (sessions.month != null && sessions.year != null) {
                $(qcs.combo.filter.apartments).find('option[value=' + sessions.apartment + ']').attr('selected', 'selected');
                $(qcs.combo.filter.months).find('option[value=' + sessions.month + ']').attr('selected', 'selected');
                $(qcs.combo.expense_months).find('option[value=' + sessions.month + ']').attr('selected', 'selected');
                $(qcs.combo.filter.years).find('option[value=' + sessions.year + ']').attr('selected', 'selected');
                $(qcs.combo.expense_years).find('option[value=' + sessions.year + ']').attr('selected', 'selected');
                l_expenses(sessions.apartment, sessions.month, sessions.year);
            }
            else {
                $(qcs.combo.filter.months).find('option[value=' + qcs.default[0].month + ']').attr('selected', 'selected');
                $(qcs.combo.expense_months).find('option[value=' + qcs.default[0].month + ']').attr('selected', 'selected');
                $(qcs.combo.filter.years).find('option[value=' + qcs.default[0].year + ']').attr('selected', 'selected');
                $(qcs.combo.expense_years).find('option[value=' + qcs.default[0].year + ']').attr('selected', 'selected');
                sessionStorage.setItem("_apartment", filter.apartment_id);
                sessionStorage.setItem("_month", qcs.default[0].month);
                sessionStorage.setItem("_year", qcs.default[0].year);
                l_expenses(filter.apartment_id, qcs.default[0].month, qcs.default[0].year);
            }

            $(qcs.table).tooltip({
                selector: '[data-toggle=tooltip]',
                container: 'body'
            });

            Masks.Init();

        });

    </script>

}

