@{
    ViewData["Title"] = "Kullanıcılar";
}

@section Subheader {
    <div class="subheader py-2 py-lg-4 subheader-solid" id="kt_subheader">
        <div class="container-fluid d-flex align-items-center justify-content-between flex-wrap flex-sm-nowrap">
            <!--begin::Info-->
            <div class="d-flex align-items-center flex-wrap mr-2">
                <h5 class="text-dark font-weight-bold mt-2 mb-2 mr-5">Kullanıcılar</h5>
                <div class="subheader-separator subheader-separator-ver mt-2 mb-2 mr-4 bg-gray-200"></div>
                <span class="text-muted font-weight-bold mr-4">#XRS-45670</span>
            </div>
            <!--end::Info-->
            <!--begin::Toolbar-->
            <div class="d-flex align-items-center">
            </div>
            <!--end::Toolbar-->
        </div>
    </div>
}

<div class="container-fluid">
    <div class="row">
        <div class="col-xl-12">
            <div class="card card-custom">
                <div class="card-header">
                    <div class="card-title">
                        <span class="card-icon">
                            <i class="far fa-building text-primary"></i>
                        </span>
                        <h3 class="card-label">Kullanıcılar</h3>
                    </div>
                    <div class="card-toolbar">
                        <a href="javascript:;" id="modal-user-new" class="btn btn-primary font-weight-bolder">
                            Yeni
                        </a>
                    </div>
                </div>
                <div class="card-body">

                    <!--begin::Search Form-->
                    <div class="mb-7">
                        <div class="row align-items-center">
                            <div class="col-lg-12 col-xl-12">
                                <div class="row align-items-center">

                                    <div class="col-md-2 my-2 my-md-0">
                                        <div class="input-icon">
                                            <input type="text" class="form-control" placeholder="Search..." id="kt_datatable_search_query" />
                                            <span>
                                                <i class="flaticon2-search-1 text-muted"></i>
                                            </span>
                                        </div>
                                    </div>

                                    <div class="col-md-1 my-2 my-md-0">
                                        <div class="d-flex align-items-center">
                                            <select class="form-control" id="kt_datatable_search_status">
                                                <option value="">Tümü</option>
                                                <option value="1">Aktif</option>
                                                <option value="2">Pasif</option>
                                            </select>
                                        </div>
                                    </div>
                                     
                                </div>
                            </div>

                        </div>
                    </div>

                    <div class="datatable datatable-bordered datatable-head-custom" id="t-users"></div>

                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-user" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-md" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modal-expense-title">Yeni</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i aria-hidden="true" class="ki ki-close"></i>
                </button>
            </div>
            <div class="modal-body pb-0">

                <form class="form" id="form-user">

                    <div class="form-group mb-0 row">

                        <input type="hidden" name="UserId" />

                        <div class="col-xl-6 mb-6">
                            <label>* Adınız</label>
                            <input type="text" name="Firstname" class="form-control" placeholder="">
                        </div>

                        <div class="col-xl-6">
                            <label>* Soyadınız</label>
                            <input type="text" name="Lastname" class="form-control" placeholder="">
                        </div>

                        <div class="col-xl-12 mb-6">
                            <label>* E-Posta</label>
                            <input type="text" name="Email" class="form-control" placeholder="">
                        </div>

                        <div class="col-xl-12 mb-6">
                            <label>* Rol</label>
                            <select class="form-control" name="RoleX" id="combo-role-x"></select>
                        </div>

                        <div class="col-xl-6 mb-7">
                            <label>* Parola</label>
                            <input type="text" name="Password" class="form-control" placeholder="">
                        </div>

                        <div class="col-xl-6 mb-7">
                            <label>* Parola Onay</label>
                            <input type="text" name="ConfirmPassword" class="form-control" placeholder="">
                        </div>

                    </div>

                </form>

            </div>
            <div class="modal-footer">
                @*<button type="button" class="btn btn-light-primary font-weight-bold" data-dismiss="modal">Close</button>*@
                <button type="button" id="button-user" class="btn btn-primary font-weight-bold">Kaydet</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-update-user" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-md" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modal-expense-title">Düzenle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i aria-hidden="true" class="ki ki-close"></i>
                </button>
            </div>
            <div class="modal-body pb-0">

                <form class="form" id="form-update-user">

                    <div class="form-group mb-0 row">

                        <div class="col-xl-6 mb-6">
                            <label>* Adınız</label>
                            <input type="text" name="FirstnameX" class="form-control" placeholder="">
                        </div>

                        <div class="col-xl-6">
                            <label>* Soyadınız</label>
                            <input type="text" name="LastnameX" class="form-control" placeholder="">
                        </div>

                        <div class="col-xl-12 mb-6">
                            <label>* E-Posta</label>
                            <input type="text" name="EmailX" class="form-control" placeholder="">
                        </div>

                        <div class="col-xl-12 mb-7">
                            <label>* Rol</label>
                            <select class="form-control" name="RoleXX" id="combo-role-xx"></select>
                        </div>

                    </div>

                </form>

            </div>
            <div class="modal-footer">
                <button type="button" id="button-update-user" class="btn btn-primary font-weight-bold">Kaydet</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {

    <script src="~/lib/theme/plugins/custom/datatables/datatables.bundle.js"></script>

    <script type="text/javascript">

        var _date = new Date();

        // Query Component Selector
        const qcs = {
            default: [
                {
                    month: _date.getMonth() + 1,
                    year: _date.getFullYear(),
                }
            ],
            table: "#t-users",
            input: {
                user_id: "[name='UserId']",
                firstname: "[name='Firstname']",
                lastname: "[name='Lastname']",
                email: "[name='Email']",
                password: "[name='Password']",
                password_confirm: "[name='ConfirmPassword']",
                update_firstname: "[name='FirstnameX']",
                update_lastname: "[name='LastnameX']",
                update_email: "[name='EmailX']",
            },
            select: {
                role_x: "select[name='RoleX']",
                role_xx: "select[name='RoleXX']",
            },
            combo: {
                role_x: '#combo-role-x',
                role_xx: '#combo-role-xx',
                filter: {
                    apartments: '#combo-filter-apartments',
                }
            },
            modal: {
                user: '#modal-user',
                user_new: '#modal-user-new',
                user_edit: '.modal-user-edit',
                update_user: '#modal-update-user',
            }
        }

        function combo_roles(type) {

            $.ajax({
                type: 'GET',
                url: "/ams/app/combo-roles",
                async: false,
                dataType: 'json',
                success: function (d) {

                    console.log(d);

                    if (d.isSucceed) {
                        switch (d.statuses) {
                            case 'x-combo':

                                if (type == 'create') {

                                    $(qcs.combo.role_x).empty();

                                    $.each(d.listView, function (i, v) {

                                        if (i == 0) {
                                            $(qcs.combo.role_x).append('<option value=' + v.id + ' selected="selected">' + v.displayName + '</option>');
                                        } else {
                                            $(qcs.combo.role_x).append('<option value=' + v.id + '>' + v.displayName + '</option>');
                                        }

                                    });

                                } else {

                                    $(qcs.combo.role_xx).empty();

                                    $.each(d.listView, function (i, v) {

                                        if (i == 0) {
                                            $(qcs.combo.role_xx).append('<option value=' + v.id + ' selected="selected">' + v.displayName + '</option>');
                                        } else {
                                            $(qcs.combo.role_xx).append('<option value=' + v.id + '>' + v.displayName + '</option>');
                                        }

                                    });

                                }

                                break;

                            case 'x-fail':
                              
                                break;
                        }
                    }

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log('Could not get posts, server response: ' + textStatus + ': ' + errorThrown);
                }
            });

        }

        function create_user() {

            const form_user = document.getElementById('form-user');
            const button_user = document.getElementById('button-user');

            const fv = FormValidation.formValidation(form_user, {

                fields: {

                    Firstname: {
                        validators: {
                            notEmpty: {
                                message: 'Adınız boş geçilemez.'
                            },
                            stringLength: {
                                min: 2,
                                max: 50,
                                message: 'Adınız minimum 2, maksimum 100 karakter olmalıdır.'
                            }
                        }
                    },

                    Lastname: {
                        validators: {
                            notEmpty: {
                                message: 'Soyadınızı boş geçilemez.'
                            },
                            stringLength: {
                                min: 2,
                                max: 50,
                                message: 'Soyadınızı minimum 2, maksimum 100 karakter olmalıdır.'
                            }
                        }
                    },

                    Email: {
                        validators: {
                            notEmpty: {
                                message: 'E-posta boş geçilemez.'
                            },
                            emailAddress: {
                                message: 'E-posta geçerli değil.'
                            },
                            stringLength: {
                                min: 5,
                                max: 50,
                                message: 'E-posta alanı minimum 5, maksimum 100 karakter olmalıdır.'
                            }
                        }
                    },

                    Password: {
                        validators: {
                            notEmpty: {
                                message: 'Parola boş geçilemez'
                            },
                            stringLength: {
                                min: 8,
                                message: 'Parola en az 8 karakter uzunluğunda olmalıdır.'
                            },
                            regexp: {
                                regexp: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@@$!%*?&])[A-Za-z\d@@$!%*?&]{8,}$/,
                                message: 'Parola en az bir küçük harf, bir büyük harf, bir sayısal rakam ve bir özel karakter içermelidir.'
                            }
                        }
                    },

                    ConfirmPassword: {
                        validators: {
                            notEmpty: {
                                message: 'Onay parolası boş geçilemez'
                            },
                            identical: {
                                compare: function () {
                                    return $(qcs.input.password).val();
                                },
                                message: 'Parolanız eşleşmiyor.'
                            }
                        }
                    }


                },
                plugins: {
                    trigger: new FormValidation.plugins.Trigger(),
                    bootstrap: new FormValidation.plugins.Bootstrap(),
                },
            }).on('core.form.validating', function () {
                button_user.innerHTML = 'Doğrulanıyor ...';
            });

            button_user.addEventListener('click', function () {

                fv.validate().then(function (status) {

                    button_user.innerHTML = status === 'Valid' ? 'Güncelleniyor...' : 'Lütfen tekrar deneyin';

                    switch (status) {
                        case "Valid":
                         
                            var dm = {
                                Id: $(qcs.input.user_id).val(),
                                RoleId: $(qcs.select.role_x).val(),
                                Firstname: $(qcs.input.firstname).val(),
                                Lastname: $(qcs.input.lastname).val(),
                                Email: $(qcs.input.email).val(),
                                Password: $(qcs.input.password).val(),
                                ConfirmPassword: $(qcs.input.password_confirm).val(),
                            };

                            // if(dm.Id != '') {
                            //     fv.resetField("Password");
                            //     fv.resetField("ConfirmPassword");
                            //     fv.removeField("Password");
                            //     fv.removeField("ConfirmPassword");
                            // }

                            console.log(dm);

                            $.post("/ams/app/user/add", dm, function (d) {

                                console.log(d);

                                if (d.isSucceed) {
                                    switch (d.statuses) {
                                        case 'x-add':

                                            Swal.fire({
                                                title: "Tebrikler",
                                                text: "Yeni kullanıcı oluşturuldu.",
                                                icon: "success",
                                                timer: 4000,
                                                onOpen: function () {
                                                    Swal.showLoading()
                                                },
                                                allowOutsideClick: false,
                                                allowEscapeKey: false,
                                                buttonsStyling: false,
                                                confirmButtonText: "<i class='la la-headphones'></i> I am game!",
                                                showCancelButton: false,
                                                cancelButtonText: "<i class='la la-thumbs-down'></i> No, thanks",
                                                customClass: {
                                                    confirmButton: "btn btn-danger",
                                                    cancelButton: "btn btn-default"
                                                }
                                            }).then(function (r) {

                                                if (r.dismiss === "timer") {
                                                    $(qcs.modal.user).modal('hide');
                                                    l_users();
                                                }

                                            });

                                            break;
                                        case 'x-edit':

                                            Swal.fire({
                                                title: "Güncelleniyor",
                                                text: "Gider bilgileri güncelleniyor.",
                                                icon: "success",
                                                timer: 4000,
                                                onOpen: function () {
                                                    Swal.showLoading()
                                                },
                                                allowOutsideClick: false,
                                                allowEscapeKey: false,
                                                buttonsStyling: false,
                                                confirmButtonText: "<i class='la la-headphones'></i> I am game!",
                                                showCancelButton: false,
                                                cancelButtonText: "<i class='la la-thumbs-down'></i> No, thanks",
                                                customClass: {
                                                    confirmButton: "btn btn-danger",
                                                    cancelButton: "btn btn-default"
                                                }
                                            }).then(function (r) {

                                                if (r.dismiss === "timer") {

                                                    $(qcs.modal.user).modal('hide');
                                                    l_users();
                                                }

                                            });

                                            break;
                                        case 'x-fail':
                                          
                                            break;
                                    }
                                }


                            }).done(function () {

                            }).fail(function (jqXHR, textStatus, errorThrown) {

                            }).always(function () {

                            });

                            break;
                        default:
                    }

                });
            });

            // -------------------------------------------------------------------------------------------

            // TODO : Kullanıcı girebileceğimiz "Modal" açma
            $(document).delegate(qcs.modal.user_new, 'click', function () {

                combo_roles('create');

                $(qcs.input.user_id).removeAttr("value");

                fv.resetForm("form-user");
                button_user.innerHTML = "Kaydet";
                  
                $(qcs.modal.user).modal();

            });

        }

        function update_user() {

            const form_user = document.getElementById('form-update-user');
            const button_user = document.getElementById('button-update-user');

            const fv = FormValidation.formValidation(form_user, {

                fields: {

                    FirstnameX: {
                        validators: {
                            notEmpty: {
                                message: 'Adınız boş geçilemez.'
                            },
                            stringLength: {
                                min: 2,
                                max: 50,
                                message: 'Adınız minimum 2, maksimum 100 karakter olmalıdır.'
                            }
                        }
                    },

                    LastnameX: {
                        validators: {
                            notEmpty: {
                                message: 'Soyadınızı boş geçilemez.'
                            },
                            stringLength: {
                                min: 2,
                                max: 50,
                                message: 'Soyadınızı minimum 2, maksimum 100 karakter olmalıdır.'
                            }
                        }
                    },

                    EmailX: {
                        validators: {
                            notEmpty: {
                                message: 'E-posta boş geçilemez.'
                            },
                            emailAddress: {
                                message: 'E-posta geçerli değil.'
                            },
                            stringLength: {
                                min: 5,
                                max: 50,
                                message: 'E-posta alanı minimum 5, maksimum 100 karakter olmalıdır.'
                            }
                        }
                    }

                },
                plugins: {
                    trigger: new FormValidation.plugins.Trigger(),
                    bootstrap: new FormValidation.plugins.Bootstrap(),
                },
            }).on('core.form.validating', function () {
                button_user.innerHTML = 'Doğrulanıyor ...';
            });

            button_user.addEventListener('click', function () {

                fv.validate().then(function (status) {

                    button_user.innerHTML = status === 'Valid' ? 'Güncelleniyor...' : 'Lütfen tekrar deneyin';

                    console.log(status);

                    switch (status) {
                        case "Valid":

                            var dm = {
                                Id: $(qcs.input.user_id).val(),
                                RoleId: $(qcs.select.role_xx).val(),
                                Firstname: $(qcs.input.update_firstname).val(),
                                Lastname: $(qcs.input.update_lastname).val(),
                                Email: $(qcs.input.update_email).val(),
                            };

                            $.post("/ams/app/user/edit", dm, function (d) {

                                console.log(d);

                                if (d.isSucceed) {
                                    switch (d.statuses) {
                                        case 'x-edit':

                                            Swal.fire({
                                                title: "Güncelleniyor",
                                                text: "Kullanıcı bilgileri güncelleniyor.",
                                                icon: "success",
                                                timer: 4000,
                                                onOpen: function () {
                                                    Swal.showLoading()
                                                },
                                                allowOutsideClick: false,
                                                allowEscapeKey: false,
                                                buttonsStyling: false,
                                                confirmButtonText: "<i class='la la-headphones'></i> I am game!",
                                                showCancelButton: false,
                                                cancelButtonText: "<i class='la la-thumbs-down'></i> No, thanks",
                                                customClass: {
                                                    confirmButton: "btn btn-danger",
                                                    cancelButton: "btn btn-default"
                                                }
                                            }).then(function (r) {

                                                if (r.dismiss === "timer") {

                                                    $(qcs.modal.update_user).modal('hide');
                                                    l_users();
                                                }

                                            });

                                            break;
                                        case 'x-fail':

                                            break;
                                    }
                                }


                            }).done(function () {

                            }).fail(function (jqXHR, textStatus, errorThrown) {

                            }).always(function () {

                            });

                            break;
                        case 'Invalid':

                            Swal.fire({
                                title: "Hata",
                                text: "Zorunlu alanlar boş geçilemez.",
                                icon: "error",
                                timer: 4000,
                                onOpen: function () {
                                    Swal.showLoading()
                                },
                                allowOutsideClick: false,
                                allowEscapeKey: false,
                                buttonsStyling: false,
                                confirmButtonText: "<i class='la la-headphones'></i> I am game!",
                                showCancelButton: false,
                                cancelButtonText: "<i class='la la-thumbs-down'></i> No, thanks",
                                customClass: {
                                    confirmButton: "btn btn-danger",
                                    cancelButton: "btn btn-default"
                                }
                            }).then(function (r) {

                                if (r.dismiss === "timer") {
                                    button_user.innerHTML = "Güncelle";
                                }

                            });

                            break;
                        default:
                    }

                });
            });

            // -------------------------------------------------------------

            $(document).delegate(qcs.modal.user_edit, 'click', function () {

                combo_roles('update');
                button_user.innerHTML = "Güncelle";

                fv.resetForm("form-update-user");

                var filter = {
                    user_id: $(this).data("user-id"),
                }

                g_user(filter.user_id);

                $(qcs.modal.update_user).modal();

            });

        }

        function g_user(user_id) {

            // var dm = { Id: expense_id };

            $.get("/ams/app/user/" + user_id, function (d) {

                console.log("USER DETAIL :::::::");
                console.log(d);


                if (d.isSucceed) {
                    switch (d.statuses) {
                        case 'x-detail':

                            $(qcs.input.user_id).val(d.view.id);
                            $(qcs.input.update_firstname).val(d.view.firstname);
                            $(qcs.input.update_lastname).val(d.view.lastname);
                            $(qcs.input.update_email).val(d.view.email);


                            $(qcs.combo.role_xx + " option[value=" + d.view.roleId + "]").removeAttr('selected').attr('selected', 'selected');
                             

                            // $(qcs.label_username).attr("data-label-username", d.View.Username);
                            // $(qcs.modal_user_title).text(d.View.Firstname + ' ' + d.View.Lastname);

                            // $(qcs.label_email).attr("data-label-email", d.View.Email);


                            // $(qcs.combo.apartments + " option[value=" + d.view.apartmentId + "]").removeAttr('selected').attr('selected', 'selected');
                            // $(qcs.combo.users + " option[value=" + d.view.apartmentId + "]").removeAttr('selected').attr('selected', 'selected');

                            // $(qcs.user_email_valid).val(d.View.Email);


                            break;

                        case 'x-fail':

                            Swal.fire({
                                title: "Hata",
                                text: "İstenmeyen bir hata oluştu.",
                                icon: "error",
                                timer: 4000,
                                onOpen: function () {
                                    Swal.showLoading()
                                },
                                allowOutsideClick: false,
                                allowEscapeKey: false,
                                buttonsStyling: false,
                                confirmButtonText: "<i class='la la-headphones'></i> I am game!",
                                showCancelButton: false,
                                cancelButtonText: "<i class='la la-thumbs-down'></i> No, thanks",
                                customClass: {
                                    confirmButton: "btn btn-danger",
                                    cancelButton: "btn btn-default"
                                }
                            }).then(function (r) {

                                if (r.dismiss === "timer") {
                                    $(qcs.modal.housing).modal('hide');
                                    // l_expenses(dm.ApartmentId, dm.Month, dm.Year);
                                }
                            });

                            break;
                    }
                }


            }).done(function (d) {



            }).fail(function (jqXHR, textStatus, errorThrown) {

                Swal.fire({
                    title: "Hata",
                    text: "Hata Kodu : " + textStatus,
                    icon: "error",
                    timer: 4000,
                    onOpen: function () {
                        Swal.showLoading()
                    },
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    buttonsStyling: false,
                    confirmButtonText: "<i class='la la-headphones'></i> I am game!",
                    showCancelButton: false,
                    cancelButtonText: "<i class='la la-thumbs-down'></i> No, thanks",
                    customClass: {
                        confirmButton: "btn btn-danger",
                        cancelButton: "btn btn-default"
                    }
                }).then(function (r) {

                    if (r.dismiss === "timer") { }

                });

            }).always(function (d) {

            });

        }


        function l_users() {

            $(qcs.table).KTDatatable('destroy');

            var ds = $.ajax({
                type: 'GET',
                url: '/ams/app/users/',
                async: false,
                dataType: 'json',
                done: function (data) {
                    return data;
                },
                fail: function (jqXHR, textStatus, errorThrown) {
                    console.log('Could not get posts, server response: ' + textStatus + ': ' + errorThrown);
                }
            }).responseJSON;

            console.table(ds);


            var datatable = $(qcs.table).KTDatatable({
                // datasource definition
                data: {
                    // type: 'local',
                    // source: dataJSONArray,
                    source: ds,
                    pageSize: 10,
                },

                // layout definition
                layout: {
                    scroll: false, // enable/disable datatable scroll both horizontal and vertical when needed.
                    // height: 450, // datatable's body's fixed height
                    footer: false, // display/hide footer
                },
                // column sorting
                sortable: true,
                pagination: true,
                search: {
                    input: $('#kt_datatable_search_query'),
                    key: 'generalSearch',
                },
                columns: [
                    {
                        field: 'id',
                        title: '#',
                        sortable: false,
                        width: 20,
                        type: 'number',
                        selector: true,
                        textAlign: 'center',
                    },
                    {
                        field: 'displayName',
                        title: 'Kullancı',
                        template: function (row) {
                            var status = {
                                1: { 'class': ' label label-outline-success label-inline' },
                                0: { 'class': ' label label-outline-danger label-inline' },
                            };
                            return '<span class="label font-weight-bold label-lg ' + status[row.emailConfirmed].class + ' label-inline">' + row.displayName + '</span>';
                        },
                    },
                    {
                        field: 'role',
                        title: 'Rol',
                    },
                    {
                        field: '_CreateTime',
                        title: 'Kayıt Tarihi',
                        type: 'date',
                    },
                    {
                        field: '_ModifiedTime',
                        title: 'Güncellenme Tarihi',
                    },
                    {
                        field: 'createUser',
                        title: 'Oluşturan',
                    },
                    {
                        field: 'isActive',
                        title: 'Durum',
                        template: function (row) {
                            var status = {
                                1: {
                                    'title': 'Aktif',
                                    'class': ' label-light-success',
                                },
                                2: {
                                    'title': 'Pasif',
                                    'class': ' label-light-danger',
                                },
                            };
                            return '<span class="label font-weight-bold label-lg ' + status[row.isActive].class + ' label-inline">' + status[row.isActive].title + '</span>';
                        },
                    },
                    // {
                    //     field: 'Type',
                    //     title: 'Type',
                    //     autoHide: false,
                    //     template: function (row) {
                    //         var status = {
                    //             1: {
                    //                 'title': 'Online',
                    //                 'state': 'danger',
                    //             },
                    //             2: {
                    //                 'title': 'Retail',
                    //                 'state': 'primary',
                    //             },
                    //             3: {
                    //                 'title': 'Direct',
                    //                 'state': 'success',
                    //             },
                    //         };
                    //         return '<span class="label label-' + status[row.Type].state + ' label-dot mr-2"></span><span class="font-weight-bold text-' + status[row.Type].state + '">' +
                    //             status[row.Type].title + '</span>';
                    //     },
                    // },
                    {
                        field: 'Actions',
                        title: 'İşlem',
                        sortable: false,
                        width: 125,
                        overflow: 'visible',
                        autoHide: false,
                        template: function (row) {

                            var r = `
                                    <a href="javascript:;" class="btn btn-sm btn-clean btn-icon modal-user-edit" data-user-id='${row.id}' data-toggle="tooltip" title="Edit"><i class="la la-pencil"></i></a>
                                    <a href="javascript:;" class="btn btn-sm btn-clean btn-icon" data-delete-id='${row.id}' data-toggle="tooltip" title="Delete"><i class="la fa-trash"></i></a>
                                            `;
                            return r;


                        },
                    }],
            });

            $('#combof-status').on('change', function (e) {

                // console.log(e.target.value);
                // console.log($(this).val().toLowerCase());

                var status = $(this).val().toLowerCase();
                datatable.search(status, 'isActive');

            });

            // $('#kt_datatable_search_type').on('change', function () {
            //     datatable.search($(this).val().toLowerCase(), 'Type');
            // });

            // $('#kt_datatable_search_status, #kt_datatable_search_type').selectpicker();


            $('#kt_subheader').on('click', function (e) {

                e.preventDefault();

                $('.datatable-input').each(function () {
                    $(this).val('');
                    datatable.column($(this).data('col-index')).search('', false, false);
                });
                datatable.table().draw();
            });


        }


        $(function () {

            l_users();
            create_user();
            update_user();

            $(qcs.table).tooltip({
                selector: '[data-toggle=tooltip]',
                container: 'body'
            });

        });

    </script>

}