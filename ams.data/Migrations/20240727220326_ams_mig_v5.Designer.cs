// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ams.data.Context;

#nullable disable

namespace ams.data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240727220326_ams_mig_v5")]
    partial class ams_mig_v5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ams.entity.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeleteUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("IsStatus")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("IsTrial")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TrialEndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreateUser");

                    b.HasIndex("DeleteUser");

                    b.HasIndex("ModifiedUser");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db72e0e2-3201-414f-9753-190466e024f3"),
                            AccountName = "ABC A.Ş",
                            CreateTime = new DateTime(2024, 7, 28, 1, 3, 26, 205, DateTimeKind.Local).AddTicks(4236),
                            CreateUser = new Guid("6fa95f6e-2516-49e8-9ae6-7745e7743dbf"),
                            Domain = "abc.com",
                            IsActive = true,
                            IsDeleted = false,
                            IsTrial = true
                        });
                });

            modelBuilder.Entity("ams.entity.Entities.AdxMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icons")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("IsStatus")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Urls")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("AdxMenus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2b3d904-401c-431f-9845-7fa2652d87fc"),
                            CreateTime = new DateTime(2024, 7, 28, 1, 3, 26, 205, DateTimeKind.Local).AddTicks(5104),
                            IsActive = true,
                            IsDeleted = false,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Title = "Pano",
                            Urls = "/"
                        });
                });

            modelBuilder.Entity("ams.entity.Entities.Apartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApartmentName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeleteUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("IsStatus")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreateUser");

                    b.HasIndex("DeleteUser");

                    b.HasIndex("ModifiedUser");

                    b.ToTable("Apartments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4033eef-ba92-4a1f-9ecb-1eee6996214a"),
                            AccountId = new Guid("db72e0e2-3201-414f-9753-190466e024f3"),
                            ApartmentName = "Huzur APT",
                            CreateTime = new DateTime(2024, 7, 28, 1, 3, 26, 205, DateTimeKind.Local).AddTicks(5697),
                            CreateUser = new Guid("6fa95f6e-2516-49e8-9ae6-7745e7743dbf"),
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("16f885ff-6897-4d08-afa6-0640c40d2a05"),
                            AccountId = new Guid("db72e0e2-3201-414f-9753-190466e024f3"),
                            ApartmentName = "Sevinç APT",
                            CreateTime = new DateTime(2024, 7, 28, 1, 3, 26, 205, DateTimeKind.Local).AddTicks(5703),
                            CreateUser = new Guid("6fa95f6e-2516-49e8-9ae6-7745e7743dbf"),
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d2977402-d13f-423f-bc0f-e639e4a610bb"),
                            AccountId = new Guid("db72e0e2-3201-414f-9753-190466e024f3"),
                            ApartmentName = "Güvenç APT",
                            CreateTime = new DateTime(2024, 7, 28, 1, 3, 26, 205, DateTimeKind.Local).AddTicks(5706),
                            CreateUser = new Guid("6fa95f6e-2516-49e8-9ae6-7745e7743dbf"),
                            IsActive = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("ams.entity.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4271dd20-390a-46ce-b67d-59678a720270"),
                            ConcurrencyStamp = "b9f22e19-8f83-4429-b6d5-919da74e9e61",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("4438dff4-28d6-46c1-90eb-f6b2a233d97e"),
                            ConcurrencyStamp = "9720a71f-06c8-4a3f-af8c-2fdf3da51a4c",
                            Name = "agent",
                            NormalizedName = "AGENT"
                        },
                        new
                        {
                            Id = new Guid("051004f1-a383-4746-a722-3b051d12aaea"),
                            ConcurrencyStamp = "3b2d61c1-6301-41c0-ab0c-db08f960b9fa",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("ams.entity.Entities.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("ams.entity.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeleteUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreateUser");

                    b.HasIndex("DeleteUser");

                    b.HasIndex("ModifiedUser");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6fa95f6e-2516-49e8-9ae6-7745e7743dbf"),
                            AccessFailedCount = 0,
                            AccountId = new Guid("db72e0e2-3201-414f-9753-190466e024f3"),
                            ConcurrencyStamp = "8aa0a804-8d6a-4b7c-b773-597a41947228",
                            CreateTime = new DateTime(2024, 7, 28, 1, 3, 26, 206, DateTimeKind.Local).AddTicks(6118),
                            Email = "yayirgul@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Yunus",
                            IsActive = true,
                            Lastname = "AYIRGÜL",
                            LockoutEnabled = false,
                            NormalizedEmail = "YAYIRGUL@GMAIL.COM",
                            NormalizedUserName = "YAYIRGUL@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFvOpCT2Q/rPVDgQesFCoo8X+DfjUUMmtK41RAknEajw/hbOfpibpumPlEzzqKWKVA==",
                            PhoneNumber = "+905558008040",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "50bf8aa2-7490-4e2e-afdb-7731a3890443",
                            TwoFactorEnabled = false,
                            UserName = "yayirgul@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("89da7c75-8291-4baf-9060-028a07393dde"),
                            AccessFailedCount = 0,
                            AccountId = new Guid("db72e0e2-3201-414f-9753-190466e024f3"),
                            ConcurrencyStamp = "c7c26b15-2156-466d-8670-8d9f187ae2d8",
                            CreateTime = new DateTime(2024, 7, 28, 1, 3, 26, 240, DateTimeKind.Local).AddTicks(4140),
                            Email = "kadirkeles@hotmail.com",
                            EmailConfirmed = true,
                            Firstname = "Kadir",
                            IsActive = true,
                            Lastname = "Keleş",
                            LockoutEnabled = false,
                            NormalizedEmail = "KADIRKELES@HOTMAIL.COM",
                            NormalizedUserName = "KADIRKELES@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDUeDxSAffO8mr6cjeZnBuE4h2MWSJI8cKmCfhKWCWRLN3WDJf6QuntMWlYqiT2Q3w==",
                            PhoneNumber = "+905558008050",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "959604d6-67df-4d00-bb1a-3509af9f44b9",
                            TwoFactorEnabled = false,
                            UserName = "kadirkeles@hotmail.com"
                        },
                        new
                        {
                            Id = new Guid("a35a610d-689f-4ab4-9324-cc227bfdbfba"),
                            AccessFailedCount = 0,
                            AccountId = new Guid("db72e0e2-3201-414f-9753-190466e024f3"),
                            ConcurrencyStamp = "6d2ee7c8-bfb2-463a-be94-c66e4451eb29",
                            CreateTime = new DateTime(2024, 7, 28, 1, 3, 26, 274, DateTimeKind.Local).AddTicks(1549),
                            Email = "lokmanyilmaz@hotmail.com",
                            EmailConfirmed = true,
                            Firstname = "Lokman",
                            IsActive = true,
                            Lastname = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "LOKMANYILMAZ@HOTMAIL.COM",
                            NormalizedUserName = "LOKMANYILMAZ@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOz1EE1CbSFI3OljLhbLR+VnjCAVtxQy4JCOtWU3+ecIdeKeurN7VO9Je+cvg7nV6g==",
                            PhoneNumber = "+905558008060",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c9960e1f-714a-478d-86bb-975f2b56f7a7",
                            TwoFactorEnabled = false,
                            UserName = "lokmanyilmaz@hotmail.com"
                        });
                });

            modelBuilder.Entity("ams.entity.Entities.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("ams.entity.Entities.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("ams.entity.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("6fa95f6e-2516-49e8-9ae6-7745e7743dbf"),
                            RoleId = new Guid("4271dd20-390a-46ce-b67d-59678a720270")
                        },
                        new
                        {
                            UserId = new Guid("89da7c75-8291-4baf-9060-028a07393dde"),
                            RoleId = new Guid("4438dff4-28d6-46c1-90eb-f6b2a233d97e")
                        },
                        new
                        {
                            UserId = new Guid("a35a610d-689f-4ab4-9324-cc227bfdbfba"),
                            RoleId = new Guid("051004f1-a383-4746-a722-3b051d12aaea")
                        });
                });

            modelBuilder.Entity("ams.entity.Entities.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ams.entity.Entities.Debit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.Property<Guid>("ApartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DebitUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeleteUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpenseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HousingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("IsStatus")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<int>("Queue")
                        .HasColumnType("int");

                    b.Property<int>("_Month")
                        .HasColumnType("int");

                    b.Property<int>("_Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("CreateUser");

                    b.HasIndex("DebitUser");

                    b.HasIndex("DeleteUser");

                    b.HasIndex("HousingId");

                    b.HasIndex("ModifiedUser");

                    b.ToTable("Debits");
                });

            modelBuilder.Entity("ams.entity.Entities.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.Property<Guid?>("ApartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeleteUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpenseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpenseName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<string>("IsStatus")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("CreateUser");

                    b.HasIndex("DeleteUser");

                    b.HasIndex("ModifiedUser");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("ams.entity.Entities.Housing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeleteUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("HousingName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("HousingNo")
                        .HasColumnType("int");

                    b.Property<Guid?>("HousingSafe")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HousingUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("IsStatus")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("CreateUser");

                    b.HasIndex("DeleteUser");

                    b.HasIndex("HousingSafe")
                        .IsUnique()
                        .HasFilter("[HousingSafe] IS NOT NULL");

                    b.HasIndex("HousingUser");

                    b.HasIndex("ModifiedUser");

                    b.ToTable("Housings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("709a770b-66c6-4adc-bd19-6438117bf646"),
                            AccountId = new Guid("db72e0e2-3201-414f-9753-190466e024f3"),
                            ApartmentId = new Guid("16f885ff-6897-4d08-afa6-0640c40d2a05"),
                            CreateTime = new DateTime(2024, 7, 28, 1, 3, 26, 309, DateTimeKind.Local).AddTicks(6941),
                            CreateUser = new Guid("6fa95f6e-2516-49e8-9ae6-7745e7743dbf"),
                            HousingName = "Daire 1",
                            HousingNo = 0,
                            IsActive = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("ams.entity.Entities.HousingSafe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.Property<Guid>("ApartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeleteUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HousingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HousingSafeUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("IsStatus")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("CreateUser");

                    b.HasIndex("DeleteUser");

                    b.HasIndex("HousingSafeUser");

                    b.HasIndex("ModifiedUser");

                    b.ToTable("HousingSafes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("666776f7-518b-4805-a726-eba238e03fc4"),
                            AccountId = new Guid("db72e0e2-3201-414f-9753-190466e024f3"),
                            Amount = 100m,
                            ApartmentId = new Guid("d4033eef-ba92-4a1f-9ecb-1eee6996214a"),
                            CreateTime = new DateTime(2024, 7, 28, 1, 3, 26, 309, DateTimeKind.Local).AddTicks(7387),
                            HousingId = new Guid("709a770b-66c6-4adc-bd19-6438117bf646"),
                            IsActive = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("ams.entity.Entities.Account", b =>
                {
                    b.HasOne("ams.entity.Entities.AppUser", "CreateTheUser")
                        .WithMany()
                        .HasForeignKey("CreateUser");

                    b.HasOne("ams.entity.Entities.AppUser", "DeleteTheUser")
                        .WithMany()
                        .HasForeignKey("DeleteUser");

                    b.HasOne("ams.entity.Entities.AppUser", "ModifiedTheUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUser");

                    b.Navigation("CreateTheUser");

                    b.Navigation("DeleteTheUser");

                    b.Navigation("ModifiedTheUser");
                });

            modelBuilder.Entity("ams.entity.Entities.Apartment", b =>
                {
                    b.HasOne("ams.entity.Entities.Account", "Accounts")
                        .WithMany("Apartments")
                        .HasForeignKey("AccountId");

                    b.HasOne("ams.entity.Entities.AppUser", "CreateTheUser")
                        .WithMany()
                        .HasForeignKey("CreateUser");

                    b.HasOne("ams.entity.Entities.AppUser", "DeleteTheUser")
                        .WithMany()
                        .HasForeignKey("DeleteUser");

                    b.HasOne("ams.entity.Entities.AppUser", "ModifiedTheUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUser");

                    b.Navigation("Accounts");

                    b.Navigation("CreateTheUser");

                    b.Navigation("DeleteTheUser");

                    b.Navigation("ModifiedTheUser");
                });

            modelBuilder.Entity("ams.entity.Entities.AppRoleClaim", b =>
                {
                    b.HasOne("ams.entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ams.entity.Entities.AppUser", b =>
                {
                    b.HasOne("ams.entity.Entities.AppUser", "CreateTheUser")
                        .WithMany()
                        .HasForeignKey("CreateUser");

                    b.HasOne("ams.entity.Entities.AppUser", "DeleteTheUser")
                        .WithMany()
                        .HasForeignKey("DeleteUser");

                    b.HasOne("ams.entity.Entities.AppUser", "ModifiedTheUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUser");

                    b.Navigation("CreateTheUser");

                    b.Navigation("DeleteTheUser");

                    b.Navigation("ModifiedTheUser");
                });

            modelBuilder.Entity("ams.entity.Entities.AppUserClaim", b =>
                {
                    b.HasOne("ams.entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ams.entity.Entities.AppUserLogin", b =>
                {
                    b.HasOne("ams.entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ams.entity.Entities.AppUserRole", b =>
                {
                    b.HasOne("ams.entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ams.entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ams.entity.Entities.AppUserToken", b =>
                {
                    b.HasOne("ams.entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ams.entity.Entities.Debit", b =>
                {
                    b.HasOne("ams.entity.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ams.entity.Entities.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ams.entity.Entities.AppUser", "CreateTheUser")
                        .WithMany()
                        .HasForeignKey("CreateUser");

                    b.HasOne("ams.entity.Entities.AppUser", "DebitTheUser")
                        .WithMany()
                        .HasForeignKey("DebitUser");

                    b.HasOne("ams.entity.Entities.AppUser", "DeleteTheUser")
                        .WithMany()
                        .HasForeignKey("DeleteUser");

                    b.HasOne("ams.entity.Entities.Housing", "Housing")
                        .WithMany("Debits")
                        .HasForeignKey("HousingId");

                    b.HasOne("ams.entity.Entities.AppUser", "ModifiedTheUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUser");

                    b.Navigation("Account");

                    b.Navigation("Apartment");

                    b.Navigation("CreateTheUser");

                    b.Navigation("DebitTheUser");

                    b.Navigation("DeleteTheUser");

                    b.Navigation("Housing");

                    b.Navigation("ModifiedTheUser");
                });

            modelBuilder.Entity("ams.entity.Entities.Expense", b =>
                {
                    b.HasOne("ams.entity.Entities.Account", "Accounts")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ams.entity.Entities.Apartment", "Apartments")
                        .WithMany()
                        .HasForeignKey("ApartmentId");

                    b.HasOne("ams.entity.Entities.AppUser", "CreateTheUser")
                        .WithMany()
                        .HasForeignKey("CreateUser");

                    b.HasOne("ams.entity.Entities.AppUser", "DeleteTheUser")
                        .WithMany()
                        .HasForeignKey("DeleteUser");

                    b.HasOne("ams.entity.Entities.AppUser", "ModifiedTheUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUser");

                    b.Navigation("Accounts");

                    b.Navigation("Apartments");

                    b.Navigation("CreateTheUser");

                    b.Navigation("DeleteTheUser");

                    b.Navigation("ModifiedTheUser");
                });

            modelBuilder.Entity("ams.entity.Entities.Housing", b =>
                {
                    b.HasOne("ams.entity.Entities.Account", "Account")
                        .WithMany("Housings")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ams.entity.Entities.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentId");

                    b.HasOne("ams.entity.Entities.AppUser", "CreateTheUser")
                        .WithMany()
                        .HasForeignKey("CreateUser");

                    b.HasOne("ams.entity.Entities.AppUser", "DeleteTheUser")
                        .WithMany()
                        .HasForeignKey("DeleteUser");

                    b.HasOne("ams.entity.Entities.HousingSafe", "HousingTheSafe")
                        .WithOne("Housing")
                        .HasForeignKey("ams.entity.Entities.Housing", "HousingSafe");

                    b.HasOne("ams.entity.Entities.AppUser", "HousingTheUser")
                        .WithMany()
                        .HasForeignKey("HousingUser");

                    b.HasOne("ams.entity.Entities.AppUser", "ModifiedTheUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUser");

                    b.Navigation("Account");

                    b.Navigation("Apartment");

                    b.Navigation("CreateTheUser");

                    b.Navigation("DeleteTheUser");

                    b.Navigation("HousingTheSafe");

                    b.Navigation("HousingTheUser");

                    b.Navigation("ModifiedTheUser");
                });

            modelBuilder.Entity("ams.entity.Entities.HousingSafe", b =>
                {
                    b.HasOne("ams.entity.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ams.entity.Entities.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ams.entity.Entities.AppUser", "CreateTheUser")
                        .WithMany()
                        .HasForeignKey("CreateUser");

                    b.HasOne("ams.entity.Entities.AppUser", "DeleteTheUser")
                        .WithMany()
                        .HasForeignKey("DeleteUser");

                    b.HasOne("ams.entity.Entities.AppUser", "HousingSafeTheUser")
                        .WithMany()
                        .HasForeignKey("HousingSafeUser");

                    b.HasOne("ams.entity.Entities.AppUser", "ModifiedTheUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUser");

                    b.Navigation("Account");

                    b.Navigation("Apartment");

                    b.Navigation("CreateTheUser");

                    b.Navigation("DeleteTheUser");

                    b.Navigation("HousingSafeTheUser");

                    b.Navigation("ModifiedTheUser");
                });

            modelBuilder.Entity("ams.entity.Entities.Account", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("Housings");
                });

            modelBuilder.Entity("ams.entity.Entities.Housing", b =>
                {
                    b.Navigation("Debits");
                });

            modelBuilder.Entity("ams.entity.Entities.HousingSafe", b =>
                {
                    b.Navigation("Housing");
                });
#pragma warning restore 612, 618
        }
    }
}
